ARG BASE_IMAGE=nvidia/cuda:12.5.1-devel-ubuntu24.04
FROM $BASE_IMAGE

ENV DEBIAN_FRONTEND=noninteractive

# nvidia-container-runtime
ENV NVIDIA_VISIBLE_DEVICES \
    ${NVIDIA_VISIBLE_DEVICES:-all}
ENV NVIDIA_DRIVER_CAPABILITIES \
    ${NVIDIA_DRIVER_CAPABILITIES:+$NVIDIA_DRIVER_CAPABILITIES,}graphics


RUN apt-get update
RUN apt-get upgrade -y
RUN apt-get install --no-install-recommends -y \
    gpg curl libfmt-dev libspdlog-dev libopencv-dev \
    libboost-all-dev libglfw3-dev libmetis-dev 
 WORKDIR /root/ros2_ws
ARG ROS_DISTRO=jazzy

# install ROS
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt-get update && apt-get install --no-install-recommends -y \
    python3-colcon-common-extensions \
    ros-${ROS_DISTRO}-desktop ros-${ROS_DISTRO}-cv-bridge ros-${ROS_DISTRO}-ros-gz \
    ros-${ROS_DISTRO}-image-transport-plugins ros-${ROS_DISTRO}-tf2-ros \
    python3-bloom python3-rosdep fakeroot debhelper dh-python ros-${ROS_DISTRO}-rmw-cyclonedds-cpp

# Needed for the lidar_localization package  
RUN apt-get update
RUN apt-get install -y \
    libpcl-dev \
    ros-${ROS_DISTRO}-perception-pcl \
    ros-jazzy-pcl-*

# Needed for the glim_viewer
RUN apt-get update
RUN apt-get install -y \
        zenity \
        kdialog


WORKDIR /root/ros2_ws
COPY  cylconedds_config.xml /root/ros2_ws
        
#COPY local_ppa /ppa

# RUN /ppa/setup_ppa.sh
# RUN sed -i 's#https://koide3.github.io/ppa#file:///ppa#g' /etc/apt/sources.list.d/koide3_ppa.list

RUN curl -s --compressed "https://koide3.github.io/ppa/ubuntu2404/KEY.gpg" | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/koide3_ppa.gpg >/dev/null
RUN echo "deb [signed-by=/etc/apt/trusted.gpg.d/koide3_ppa.gpg] https://koide3.github.io/ppa/ubuntu2404 ./" | sudo tee /etc/apt/sources.list.d/koide3_ppa.list


RUN apt-get update

ARG PACKAGE_SUFFIX=-cuda12.5

RUN apt-get install --no-install-recommends -y \
    libiridescence-dev libgtsam-points${PACKAGE_SUFFIX}-dev

RUN rosdep init && rosdep update

# COPY glim /root/glim

# WORKDIR /root/glim
# RUN bloom-generate rosdebian
# RUN sed -i 's/dh $@/dh $@ --parallel/g' ./debian/rules
# RUN sed -i 's/dh_shlibdeps/dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info/g' ./debian/rules
# RUN sed -i "s/Depends: /Depends: libiridescence-dev, libgtsam-points${PACKAGE_SUFFIX}-dev, /g" ./debian/control
# RUN sed -i "s/ros-${ROS_DISTRO}-glim/ros-${ROS_DISTRO}-glim${PACKAGE_SUFFIX}/g" ./debian/control
# RUN sed -i "s/ros-${ROS_DISTRO}-glim/ros-${ROS_DISTRO}-glim${PACKAGE_SUFFIX}/g" ./debian/changelog
# RUN sed -i "s/ros-${ROS_DISTRO}-glim/ros-${ROS_DISTRO}-glim${PACKAGE_SUFFIX}/g" ./debian/rules
# RUN DEB_BUILD_OPTIONS="parallel=$(nproc)" fakeroot debian/rules binary

# RUN apt-get install -y /root/ros-${ROS_DISTRO}-glim*.deb

# RUN echo "glim:" >> /root/rosdep.yaml
# RUN echo "  ubuntu: [ros-${ROS_DISTRO}-glim${PACKAGE_SUFFIX}]" >> /root/rosdep.yaml
# RUN echo "yaml file:///root/rosdep.yaml" > /etc/ros/rosdep/sources.list.d/99-glim.list
# RUN apt-get update && rosdep update

# COPY glim_ros2 /root/glim_ros2
# WORKDIR /root/glim_ros2

# # Problably not really needed
# RUN /bin/bash -c '. /opt/ros/${ROS_DISTRO}/setup.bash; bloom-generate rosdebian'
# RUN sed -i 's/dh $@/dh $@ --parallel/g' ./debian/rules
# RUN sed -i 's/dh_shlibdeps/dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info/g' ./debian/rules
# RUN sed -i "s/ros-${ROS_DISTRO}-glim-ros/ros-${ROS_DISTRO}-glim-ros${PACKAGE_SUFFIX}/g" ./debian/control
# RUN sed -i "s/ros-${ROS_DISTRO}-glim-ros/ros-${ROS_DISTRO}-glim-ros${PACKAGE_SUFFIX}/g" ./debian/changelog
# RUN sed -i "s/ros-${ROS_DISTRO}-glim-ros/ros-${ROS_DISTRO}-glim-ros${PACKAGE_SUFFIX}/g" ./debian/rules
# RUN DEB_BUILD_OPTIONS="parallel=$(nproc)" fakeroot debian/rules binary

COPY glim /root/ros2_ws/src/glim
COPY glim_ros2 /root/ros2_ws/src/glim_ros2
COPY glim_ext /root/ros2_ws/src/glim_ext
COPY robot_one /root/ros2_ws/src/robot_one
COPY lidar_localization_ros2 /root/ros2_ws/src/lidar_localization_ros2
COPY ndt_omp_ros2 /root/ros2_ws/src/ndt_omp_ros2

WORKDIR /root/ros2_ws
RUN /bin/bash -c '. /opt/ros/${ROS_DISTRO}/setup.bash; colcon build --parallel-workers $(nproc) --cmake-args -DCMAKE_BUILD_TYPE=Release -DBUILD_WITH_CUDA=ON -DBUILD_WITH_VIEWER=ON'
  
WORKDIR /root/ros2_ws/src/glim

RUN echo "source /ros_entrypoint.sh" >> /root/.bashrc 

RUN echo "#!/bin/bash" >> /ros_entrypoint.sh \
  && echo "set +e" >> /ros_entrypoint.sh \
  && echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> /ros_entrypoint.sh \
  && echo "source /root/ros2_ws/install/setup.bash" >> /ros_entrypoint.sh \
  && echo "export GZ_SIM_RESOURCE_PATH=/root/ros2_ws/install/robot_one_sim/share/robot_one_sim/models" >> /ros_entrypoint.sh \
  && echo 'exec "$@"' >> /ros_entrypoint.sh \
  && chmod a+x /ros_entrypoint.sh

WORKDIR /root/ros2_ws
  
ENTRYPOINT ["/ros_entrypoint.sh"]

#CMD ["bash"]
